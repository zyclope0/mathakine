#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script pour v√©rifier l'encodage des fichiers du projet.
Ce script analyse les fichiers du projet pour identifier ceux qui ont des probl√®mes
d'encodage des caract√®res accentu√©s.
"""

import os
import re
import sys
import chardet
from pathlib import Path
from colorama import init, Fore, Style

# Initialiser colorama pour les couleurs dans la console
try:
    init()
    HAS_COLOR = True
except ImportError:
    HAS_COLOR = False

# Obtenir le chemin du projet
SCRIPT_DIR = Path(__file__).resolve().parent
PROJECT_ROOT = SCRIPT_DIR.parent.parent

# Extensions de fichiers √† analyser
TEXT_EXTENSIONS = ['.py', '.bat', '.ps1', '.md', '.txt', '.html', '.css', '.js', '.json', '.env']

# Caract√®res accentu√©s courants en fran√ßais
ACCENTED_CHARS = "√©√®√™√´√†√¢√§√π√ª√º√ß√¥√∂√Æ√Ø√â√à√ä√ã√Ä√Ç√Ñ√ô√õ√ú√á√î√ñ√é√è"

# Mod√®le pour trouver des caract√®res accentu√©s mal encod√©s
ENCODING_ISSUE_PATTERN = re.compile(r'[ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ]')


def color_text(text, color):
    """Ajoute de la couleur au texte si colorama est disponible"""
    if HAS_COLOR:
        return f"{color}{text}{Style.RESET_ALL}"
    return text


def detect_encoding(file_path):
    """D√©tecte l'encodage d'un fichier"""
    with open(file_path, 'rb') as f:
        raw_data = f.read()
        result = chardet.detect(raw_data)
    return result['encoding'], result['confidence']


def has_encoding_issues(file_path, encoding):
    """V√©rifie si un fichier a des probl√®mes d'encodage des caract√®res accentu√©s"""
    try:
        with open(file_path, 'r', encoding=encoding, errors='replace') as f:
            content = f.read()
            
            # V√©rifier s'il y a des caract√®res accentu√©s
            has_accents = any(c in content for c in ACCENTED_CHARS)
            
            # V√©rifier s'il y a des caract√®res mal encod√©s
            has_issues = bool(ENCODING_ISSUE_PATTERN.search(content))
            
            return has_accents, has_issues, content
            
    except UnicodeDecodeError:
        return False, True, ""


def check_file_encoding(file_path):
    """V√©rifie l'encodage d'un fichier et identifie les probl√®mes potentiels"""
    encoding, confidence = detect_encoding(file_path)
    
    # Si l'encodage n'est pas UTF-8 ou a une faible confiance, signaler le fichier
    needs_attention = encoding != 'utf-8' or confidence < 0.9
    
    # V√©rifier s'il y a des probl√®mes d'encodage des caract√®res accentu√©s
    has_accents, has_issues, content = has_encoding_issues(file_path, encoding)
    
    # Si le fichier a des caract√®res accentu√©s et des probl√®mes d'encodage, il n√©cessite une correction
    needs_fix = has_accents and has_issues
    
    return {
        'encoding': encoding,
        'confidence': confidence,
        'has_accents': has_accents,
        'has_issues': has_issues,
        'needs_attention': needs_attention or needs_fix,
        'needs_fix': needs_fix,
        'content': content if needs_fix else None
    }


def scan_directory(directory):
    """Parcourt r√©cursivement un r√©pertoire et v√©rifie l'encodage des fichiers"""
    needs_attention = []
    needs_fix = []
    
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = Path(root) / file
            if file_path.suffix.lower() in TEXT_EXTENSIONS:
                try:
                    result = check_file_encoding(file_path)
                    rel_path = file_path.relative_to(PROJECT_ROOT)
                    
                    if result['needs_fix']:
                        needs_fix.append((rel_path, result))
                    elif result['needs_attention']:
                        needs_attention.append((rel_path, result))
                        
                except Exception as e:
                    print(f"Erreur lors de l'analyse de {file_path}: {e}")
    
    return needs_attention, needs_fix


def print_results(needs_attention, needs_fix):
    """Affiche les r√©sultats de l'analyse"""
    print(f"\n{color_text('R√©sum√© de l\'analyse d\'encodage:', Fore.CYAN)}")
    print(f"  Fichiers n√©cessitant une attention: {color_text(len(needs_attention), Fore.YELLOW)}")
    print(f"  Fichiers n√©cessitant une correction d'encodage: {color_text(len(needs_fix), Fore.RED)}")
    
    if needs_attention:
        print(f"\n{color_text('Fichiers n√©cessitant une attention (encodage non-UTF-8 ou faible confiance):', Fore.YELLOW)}")
        for rel_path, result in needs_attention:
            print(f"  ‚Ä¢ {rel_path}")
            print(f"    ‚Üí Encodage d√©tect√©: {result['encoding']} (confiance: {result['confidence']:.2f})")
    
    if needs_fix:
        print(f"\n{color_text('Fichiers n√©cessitant une correction d\'encodage (caract√®res accentu√©s mal encod√©s):', Fore.RED)}")
        for rel_path, result in needs_fix:
            print(f"  ‚Ä¢ {rel_path}")
            print(f"    ‚Üí Encodage d√©tect√©: {result['encoding']} (confiance: {result['confidence']:.2f})")


def fix_encoding(file_path, original_encoding):
    """Tente de corriger l'encodage d'un fichier en le convertissant en UTF-8"""
    try:
        # Lire le contenu avec l'encodage d√©tect√©
        with open(file_path, 'r', encoding=original_encoding, errors='replace') as f:
            content = f.read()
        
        # R√©√©crire le contenu en UTF-8
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return True
    except Exception as e:
        print(f"Erreur lors de la correction de l'encodage de {file_path}: {e}")
        return False


def main():
    # V√©rifier si chardet est install√©
    try:
        import chardet
    except ImportError:
        print(f"{color_text('Le module chardet est requis.', Fore.RED)} Installation en cours...")
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "chardet"])
        import chardet
    
    print(f"\n{color_text('Analyse de l\'encodage des fichiers...', Fore.CYAN)}")
    print(f"R√©pertoire: {PROJECT_ROOT}")
    
    needs_attention, needs_fix = scan_directory(PROJECT_ROOT)
    print_results(needs_attention, needs_fix)
    
    # Proposer de corriger les fichiers
    if needs_fix:
        print(f"\n{color_text('Actions recommand√©es:', Fore.CYAN)}")
        print("  1. Corriger l'encodage des fichiers signal√©s en les convertissant en UTF-8")
        print("  2. Utiliser le script fix_direct.py pour les fichiers avec des caract√®res accentu√©s")
        
        answer = input("\nVoulez-vous tenter de corriger automatiquement les fichiers ? (o/n): ")
        if answer.lower() == 'o':
            success_count = 0
            for rel_path, result in needs_fix:
                file_path = PROJECT_ROOT / rel_path
                print(f"Correction de {rel_path}... ", end="")
                if fix_encoding(file_path, result['encoding']):
                    success_count += 1
                    print(color_text("OK", Fore.GREEN))
                else:
                    print(color_text("√âCHEC", Fore.RED))
            
            print(f"\n{success_count}/{len(needs_fix)} fichiers corrig√©s avec succ√®s.")
            
            # Recommandations pour les fichiers non corrig√©s
            if success_count < len(needs_fix):
                print(f"\nPour les fichiers restants, utilisez le script fix_direct.py :")
                print("  python scripts/utils/fix_direct.py")
        
        return 1 if len(needs_fix) > 0 else 0
    else:
        print(f"\n{color_text('Tous les fichiers ont un encodage UTF-8 correct. üëç', Fore.GREEN)}")
        return 0


if __name__ == "__main__":
    sys.exit(main()) 