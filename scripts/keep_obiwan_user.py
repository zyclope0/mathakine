#!/usr/bin/env python3
"""
Script pour pr√©server l'utilisateur permanent ObiWan en production
Remplace l'ancien syst√®me test_user par une approche plus robuste et acad√©mique.

Fonctionnalit√©s :
1. Sauvegarde et restauration du hash de mot de passe ObiWan
2. Int√©gration avec les processus CI/CD
3. Gestion des migrations et r√©initialisations de base de donn√©es
4. Validation de l'int√©grit√© de l'utilisateur permanent
5. Logs d√©taill√©s et gestion d'erreurs robuste
"""

import os
import bcrypt
import argparse
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
from pathlib import Path

# Configuration de l'utilisateur ObiWan (doit correspondre √† create_obiwan_user.py)
OBIWAN_CONFIG = {
    'username': 'ObiWan',
    'email': 'obiwan.kenobi@jedi-temple.sw',
    'password': 'HelloThere123!',
    'full_name': 'Obi-Wan Kenobi',
    'role': 'maitre',
    'grade_level': 12
}

def get_obiwan_password_hash():
    """R√©cup√®re le hash actuel du mot de passe de l'utilisateur ObiWan"""
    # Charger les variables d'environnement
    load_dotenv()
    
    # Configuration base de donn√©es
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL:
        print("‚ùå Erreur: Variable DATABASE_URL non trouv√©e dans .env")
        return None
    
    # Masquer les informations sensibles pour l'affichage
    display_url = DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else 'locale'
    print(f"üîó Connexion √† la base: {display_url}")
    
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        
        with Session() as session:
            # R√©cup√©rer l'utilisateur ObiWan
            query = "SELECT id, username, hashed_password, role FROM users WHERE username = 'ObiWan'"
            result = session.execute(text(query)).fetchone()
            
            if not result:
                print("‚ùå Utilisateur ObiWan non trouv√©")
                return None
                
            user_id = result[0]
            username = result[1]
            password_hash = result[2]
            role = result[3]
            
            print(f"‚úÖ Hash mot de passe r√©cup√©r√© pour {username} (ID: {user_id}, R√¥le: {role})")
            return {
                'user_id': user_id,
                'username': username,
                'password_hash': password_hash,
                'role': role
            }
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {str(e)}")
        return None

def restore_obiwan_password(user_info):
    """Restaure le mot de passe de l'utilisateur ObiWan avec le hash sauvegard√©"""
    if not user_info or 'user_id' not in user_info or 'password_hash' not in user_info:
        print("‚ùå Informations utilisateur invalides")
        return False
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # Configuration base de donn√©es
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL:
        print("‚ùå Erreur: Variable DATABASE_URL non trouv√©e dans .env")
        return False
    
    # Masquer les informations sensibles pour l'affichage
    display_url = DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else 'locale'
    print(f"üîó Connexion √† la base: {display_url}")
    
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        
        with Session() as session:
            # V√©rifier si l'utilisateur existe toujours
            check_query = text("SELECT id FROM users WHERE username = 'ObiWan'")
            user = session.execute(check_query).fetchone()
            
            if not user:
                print("‚ùå Utilisateur ObiWan n'existe plus, impossible de restaurer")
                return False
            
            # Si l'ID est diff√©rent, utiliser celui trouv√©
            user_id = user[0]
            if user_id != user_info['user_id']:
                print(f"‚ö†Ô∏è ID utilisateur diff√©rent: {user_id} (nouveau) vs {user_info['user_id']} (ancien)")
                print("‚ö†Ô∏è Utilisation du nouvel ID pour la restauration")
            
            # Mettre √† jour le mot de passe
            update_query = text("UPDATE users SET hashed_password = :password WHERE id = :user_id")
            session.execute(update_query, {"password": user_info['password_hash'], "user_id": user_id})
            session.commit()
            
            print(f"‚úÖ Mot de passe restaur√© pour ObiWan (ID: {user_id})")
            
            # V√©rifier la mise √† jour
            verify_query = text("SELECT hashed_password FROM users WHERE id = :user_id")
            updated = session.execute(verify_query, {"user_id": user_id}).fetchone()
            
            if updated and updated[0] == user_info['password_hash']:
                print("‚úÖ V√©rification r√©ussie - Mot de passe correctement restaur√©")
                return True
            else:
                print("‚ùå √âchec de la v√©rification")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la restauration: {str(e)}")
        return False

def save_password_hash_to_file(user_info, filename=".obiwan_user_hash"):
    """Sauvegarde le hash du mot de passe dans un fichier"""
    if not user_info or 'password_hash' not in user_info:
        print("‚ùå Aucune information √† sauvegarder")
        return False
    
    try:
        with open(filename, 'w') as f:
            f.write(f"{user_info['user_id']}:{user_info['username']}:{user_info['password_hash']}:{user_info['role']}")
        print(f"‚úÖ Hash mot de passe ObiWan sauvegard√© dans {filename}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde dans le fichier: {str(e)}")
        return False

def load_password_hash_from_file(filename=".obiwan_user_hash"):
    """Charge le hash du mot de passe depuis un fichier"""
    try:
        if not os.path.exists(filename):
            print(f"‚ùå Fichier {filename} non trouv√©")
            return None
        
        with open(filename, 'r') as f:
            content = f.read().strip()
            
        if content.count(':') < 2:
            print("‚ùå Format de fichier invalide")
            return None
            
        parts = content.split(':', 3)
        user_id, username, password_hash = parts[0], parts[1], parts[2]
        role = parts[3] if len(parts) > 3 else 'maitre'
        
        print(f"‚úÖ Hash mot de passe ObiWan charg√© depuis {filename}")
        return {
            'user_id': int(user_id),
            'username': username,
            'password_hash': password_hash,
            'role': role
        }
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement depuis le fichier: {str(e)}")
        return None

def reset_obiwan_password():
    """R√©initialise le mot de passe de l'utilisateur ObiWan au mot de passe par d√©faut"""
    # Charger les variables d'environnement
    load_dotenv()
    
    # Configuration base de donn√©es
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL:
        print("‚ùå Erreur: Variable DATABASE_URL non trouv√©e dans .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        
        with Session() as session:
            # Trouver l'utilisateur ObiWan
            query = text("SELECT id FROM users WHERE username = 'ObiWan'")
            result = session.execute(query).fetchone()
            
            if not result:
                print("‚ùå Utilisateur ObiWan non trouv√©")
                return False
                
            user_id = result[0]
            
            # G√©n√©rer hash pour le mot de passe par d√©faut
            password = OBIWAN_CONFIG['password']
            salt = bcrypt.gensalt()
            hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
            hashed_str = hashed.decode('utf-8')
            
            # Mettre √† jour le mot de passe
            update_query = text("UPDATE users SET hashed_password = :password WHERE id = :user_id")
            session.execute(update_query, {"password": hashed_str, "user_id": user_id})
            session.commit()
            
            print(f"‚úÖ Mot de passe '{password}' d√©fini pour ObiWan (ID: {user_id})")
            return True
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation: {str(e)}")
        return False

def ensure_obiwan_exists():
    """S'assure que l'utilisateur ObiWan existe avec les bonnes propri√©t√©s"""
    # Charger les variables d'environnement
    load_dotenv()
    
    # Configuration base de donn√©es
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL:
        print("‚ùå Erreur: Variable DATABASE_URL non trouv√©e dans .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        
        with Session() as session:
            # V√©rifier si ObiWan existe
            query = text("SELECT id, username, email, role FROM users WHERE username = 'ObiWan'")
            result = session.execute(query).fetchone()
            
            if result:
                print(f"‚úÖ Utilisateur ObiWan existe (ID: {result[0]}, R√¥le: {result[3]})")
                return True
            else:
                print("‚ö†Ô∏è Utilisateur ObiWan n'existe pas - Cr√©ation n√©cessaire")
                
                # Cr√©er l'utilisateur ObiWan
                password = OBIWAN_CONFIG['password']
                salt = bcrypt.gensalt()
                hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
                hashed_str = hashed.decode('utf-8')
                
                insert_query = text("""
                    INSERT INTO users (username, email, hashed_password, full_name, role, grade_level, is_active, created_at, updated_at)
                    VALUES (:username, :email, :hashed_password, :full_name, :role, :grade_level, :is_active, NOW(), NOW())
                    RETURNING id
                """)
                
                result = session.execute(insert_query, {
                    'username': OBIWAN_CONFIG['username'],
                    'email': OBIWAN_CONFIG['email'],
                    'hashed_password': hashed_str,
                    'full_name': OBIWAN_CONFIG['full_name'],
                    'role': OBIWAN_CONFIG['role'],
                    'grade_level': OBIWAN_CONFIG['grade_level'],
                    'is_active': True
                })
                
                user_id = result.fetchone()[0]
                session.commit()
                
                print(f"‚úÖ Utilisateur ObiWan cr√©√© avec succ√®s (ID: {user_id})")
                return True
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification/cr√©ation: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Gestion du mot de passe de l'utilisateur permanent ObiWan")
    parser.add_argument('action', choices=['save', 'restore', 'reset', 'ensure'], 
                        help="""Action √† effectuer:
                        save - Sauvegarder le hash actuel
                        restore - Restaurer un hash sauvegard√©
                        reset - R√©initialiser au mot de passe par d√©faut
                        ensure - S'assurer que ObiWan existe""")
    parser.add_argument('--file', '-f', default='.obiwan_user_hash',
                        help='Fichier pour sauvegarder/charger le hash (d√©faut: .obiwan_user_hash)')
    
    args = parser.parse_args()
    
    print(f"üöÄ Gestion de l'utilisateur permanent ObiWan - Action: {args.action}")
    print("=" * 60)
    
    if args.action == 'save':
        user_info = get_obiwan_password_hash()
        if user_info:
            if save_password_hash_to_file(user_info, args.file):
                print(f"\nüéâ Hash sauvegard√© avec succ√®s dans {args.file}")
            else:
                print(f"\n‚ùå √âchec de la sauvegarde")
                exit(1)
        else:
            print(f"\n‚ùå Impossible de r√©cup√©rer les informations ObiWan")
            exit(1)
    
    elif args.action == 'restore':
        user_info = load_password_hash_from_file(args.file)
        if user_info:
            if restore_obiwan_password(user_info):
                print(f"\nüéâ Mot de passe restaur√© avec succ√®s")
            else:
                print(f"\n‚ùå √âchec de la restauration")
                exit(1)
        else:
            print(f"\n‚ùå Impossible de charger les informations depuis {args.file}")
            exit(1)
    
    elif args.action == 'reset':
        if reset_obiwan_password():
            print(f"\nüéâ Mot de passe r√©initialis√© avec succ√®s")
            print(f"üîë Nouveau mot de passe: {OBIWAN_CONFIG['password']}")
        else:
            print(f"\n‚ùå √âchec de la r√©initialisation")
            exit(1)
    
    elif args.action == 'ensure':
        if ensure_obiwan_exists():
            print(f"\nüéâ Utilisateur ObiWan v√©rifi√©/cr√©√© avec succ√®s")
            print(f"üîë Mot de passe: {OBIWAN_CONFIG['password']}")
        else:
            print(f"\n‚ùå √âchec de la v√©rification/cr√©ation")
            exit(1)
    
    print("=" * 60)
    print("‚úÖ Op√©ration termin√©e avec succ√®s")

if __name__ == "__main__":
    main() 