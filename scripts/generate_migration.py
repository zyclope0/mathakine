#!/usr/bin/env python
"""
Script pour g√©n√©rer une nouvelle migration Alembic en toute s√©curit√©.
Ce script:
1. G√©n√®re une nouvelle migration
2. V√©rifie que la migration ne supprime pas les tables h√©rit√©es
3. Affiche un r√©sum√© des op√©rations de la migration
"""
import os
import sys
import re
import argparse
from pathlib import Path

# Ajouter le r√©pertoire parent au sys.path
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from app.core.config import settings
from alembic.config import Config
from alembic import command
from loguru import logger

# Tables h√©rit√©es √† prot√©ger
PROTECTED_TABLES = {'results', 'statistics', 'user_stats', 'schema_version'}

def check_migration_file(filepath):
    """
    V√©rifie qu'un fichier de migration ne tente pas de supprimer des tables prot√©g√©es
    """
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Rechercher les op√©rations de suppression de table
    drop_table_pattern = r'op\.drop_table\([\'"]([^\'"]+)[\'"]\)'
    drop_tables = re.findall(drop_table_pattern, content)
    
    # V√©rifier si des tables prot√©g√©es sont supprim√©es
    protected_drops = [table for table in drop_tables if table in PROTECTED_TABLES]
    
    if protected_drops:
        logger.error(f"üö® ATTENTION: La migration tente de supprimer des tables prot√©g√©es: {', '.join(protected_drops)}")
        return False
    
    return True

def find_latest_migration():
    """
    Trouve le dernier fichier de migration g√©n√©r√©
    """
    versions_dir = os.path.join(BASE_DIR, "migrations", "versions")
    migration_files = sorted(Path(versions_dir).glob("*.py"), key=os.path.getmtime)
    
    if not migration_files:
        return None
    
    return str(migration_files[-1])

def generate_migration(message):
    """
    G√©n√®re une nouvelle migration Alembic
    """
    logger.info(f"G√©n√©ration d'une nouvelle migration: {message}")
    
    # Configurer Alembic
    alembic_cfg = Config(os.path.join(BASE_DIR, "alembic.ini"))
    
    try:
        # G√©n√©rer une nouvelle migration
        command.revision(alembic_cfg, message=message, autogenerate=True)
        logger.success("Migration g√©n√©r√©e avec succ√®s")
        
        # Trouver le fichier de migration g√©n√©r√©
        latest_migration = find_latest_migration()
        
        if latest_migration:
            logger.info(f"V√©rification de la migration: {os.path.basename(latest_migration)}")
            
            # V√©rifier que la migration ne supprime pas de tables prot√©g√©es
            if not check_migration_file(latest_migration):
                logger.warning("La migration n√©cessite une attention particuli√®re.")
                logger.info("Veuillez v√©rifier et modifier manuellement le fichier de migration si n√©cessaire.")
            else:
                logger.success("La migration semble s√ªre, aucune table prot√©g√©e n'est supprim√©e.")
                
            # Afficher un r√©sum√© du fichier de migration
            with open(latest_migration, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Extraire les op√©rations principales
            upgrade_section = re.search(r'def upgrade.*?def downgrade', content, re.DOTALL)
            if upgrade_section:
                operations = upgrade_section.group(0)
                # Rechercher et afficher les principales op√©rations
                add_column = re.findall(r'op\.add_column\([\'"]([^\'"]+)[\'"]', operations)
                create_table = re.findall(r'op\.create_table\([\'"]([^\'"]+)[\'"]', operations)
                alter_column = re.findall(r'op\.alter_column\([\'"]([^\'"]+)[\'"]', operations)
                
                logger.info("R√©sum√© des op√©rations de la migration:")
                if create_table:
                    logger.info(f"- Cr√©ation de tables: {', '.join(create_table)}")
                if add_column:
                    logger.info(f"- Ajout de colonnes dans: {', '.join(add_column)}")
                if alter_column:
                    logger.info(f"- Modification de colonnes dans: {', '.join(alter_column)}")
        else:
            logger.error("Impossible de trouver le fichier de migration g√©n√©r√©")
            return False
        
        return True
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration de la migration: {e}")
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="G√©n√©rer une nouvelle migration Alembic")
    parser.add_argument("message", help="Message d√©crivant la migration")
    args = parser.parse_args()
    
    success = generate_migration(args.message)
    
    if success:
        logger.info("Migration g√©n√©r√©e avec succ√®s.")
        logger.info("Pour appliquer la migration, ex√©cutez: alembic upgrade head")
        sys.exit(0)
    else:
        logger.error("√âchec de la g√©n√©ration de la migration")
        sys.exit(1) 