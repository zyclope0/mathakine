#!/usr/bin/env python3
"""
Script pour mettre √† jour le mod√®le User avec les extensions futures.
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def update_user_model():
    """Mettre √† jour le mod√®le User avec les nouvelles extensions"""
    
    updated_model = '''"""
Mod√®le SQLAlchemy pour les utilisateurs - Version √©tendue pour futures fonctionnalit√©s
"""
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, Enum, Date, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql.expression import text
from sqlalchemy.sql import func
from sqlalchemy.types import TypeDecorator
import json
from datetime import datetime, timezone
from enum import Enum as PyEnum
from app.db.base import Base


class UserRole(PyEnum):
    """√ânum√©ration des r√¥les d'utilisateur"""
    PADAWAN = "padawan"     # Apprenti, niveau standard
    MAITRE = "maitre"       # Enseignant, cr√©ateur d'exercices
    GARDIEN = "gardien"     # Mod√©rateur, gestion des utilisateurs
    ARCHIVISTE = "archiviste"  # Administrateur, acc√®s complet
    ADMIN = "admin"


class LearningStyle(PyEnum):
    """Styles d'apprentissage"""
    VISUAL = "visual"       # Apprenant visuel
    AUDITORY = "auditory"   # Apprenant auditif
    KINESTHETIC = "kinesthetic"  # Apprenant kinesth√©sique
    MIXED = "mixed"         # Apprentissage mixte


class JediRank(PyEnum):
    """Rangs Jedi pour la gamification"""
    YOUNGLING = "youngling"     # D√©butant
    INITIATE = "initiate"       # Initi√©
    PADAWAN = "padawan"         # Padawan
    KNIGHT = "knight"           # Chevalier
    MASTER = "master"           # Ma√Ætre
    GRAND_MASTER = "grand_master"  # Grand Ma√Ætre


class JSONEncodedDict(TypeDecorator):
    """Repr√©sente un dictionnaire mapp√© vers une colonne TEXT"""
    impl = Text

    def process_bind_param(self, value, dialect):
        if value is not None:
            value = json.dumps(value)
        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = json.loads(value)
        return value


class User(Base):
    """Mod√®le de donn√©es pour les utilisateurs de Mathakine - Version √©tendue"""
    __tablename__ = "users"

    # Champs de base existants
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, nullable=False, index=True)
    email = Column(String(100), unique=True, nullable=False, index=True)
    hashed_password = Column(String(255), nullable=False)
    full_name = Column(String(100))
    role = Column(Enum(UserRole, name="userrole", create_type=False), default=UserRole.PADAWAN)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Informations p√©dagogiques existantes
    grade_level = Column(Integer)
    learning_style = Column(Enum(LearningStyle, name="learningstyle", create_type=False))
    preferred_difficulty = Column(String(50))

    # Pr√©f√©rences d'interface existantes
    preferred_theme = Column(String(50))
    accessibility_settings = Column(JSONEncodedDict)

    # === NOUVELLES EXTENSIONS ===
    
    # Profil enrichi
    avatar_url = Column(String(255), nullable=True, index=True)
    bio = Column(Text, nullable=True)
    birth_date = Column(Date, nullable=True)
    timezone = Column(String(50), default='UTC')
    language_preference = Column(String(10), default='fr')

    # S√©curit√© et sessions
    last_password_change = Column(DateTime(timezone=True), nullable=True)
    two_factor_enabled = Column(Boolean, default=False)
    two_factor_secret = Column(String(255), nullable=True)
    failed_login_attempts = Column(Integer, default=0)
    locked_until = Column(DateTime(timezone=True), nullable=True)

    # Pr√©f√©rences d'apprentissage √©tendues
    cognitive_profile = Column(JSON, nullable=True)  # Profil cognitif d√©taill√©
    special_needs = Column(JSON, nullable=True)      # Besoins sp√©ciaux (autisme, dyslexie, etc.)

    # Gamification
    total_points = Column(Integer, default=0)
    current_level = Column(Integer, default=1)
    experience_points = Column(Integer, default=0)
    jedi_rank = Column(Enum(JediRank, name="jedirank", create_type=False), default=JediRank.YOUNGLING, index=True)

    # M√©tadonn√©es sociales
    is_public_profile = Column(Boolean, default=False, index=True)
    allow_friend_requests = Column(Boolean, default=True)
    show_in_leaderboards = Column(Boolean, default=True)

    # Conformit√© et donn√©es
    data_retention_consent = Column(Boolean, default=True)
    marketing_consent = Column(Boolean, default=False)
    deletion_requested_at = Column(DateTime(timezone=True), nullable=True)
    is_deleted = Column(Boolean, default=False, index=True)

    # Relations existantes
    created_exercises = relationship("Exercise", back_populates="creator", cascade="all, delete-orphan")
    attempts = relationship("Attempt", back_populates="user", cascade="all, delete-orphan")
    progress_records = relationship("Progress", back_populates="user", cascade="all, delete-orphan")
    recommendations = relationship("Recommendation", back_populates="user", cascade="all, delete-orphan")

    # Relations avec les d√©fis logiques
    created_logic_challenges = relationship("LogicChallenge", back_populates="creator", cascade="all, delete-orphan")
    logic_challenge_attempts = relationship("LogicChallengeAttempt", back_populates="user", cascade="all, delete-orphan")

    # Nouvelles relations
    user_sessions = relationship("UserSession", back_populates="user", cascade="all, delete-orphan")
    user_achievements = relationship("UserAchievement", back_populates="user", cascade="all, delete-orphan")
    notifications = relationship("Notification", back_populates="user", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<User {self.username}, Role: {self.role}, Rank: {self.jedi_rank}>"

    # M√©thodes utilitaires pour la gamification
    def add_experience(self, points: int):
        """Ajouter des points d'exp√©rience et g√©rer la mont√©e de niveau"""
        self.experience_points += points
        self.total_points += points
        
        # Logique de mont√©e de niveau (exemple)
        level_thresholds = [0, 100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500]
        new_level = 1
        for i, threshold in enumerate(level_thresholds):
            if self.experience_points >= threshold:
                new_level = i + 1
        
        if new_level > self.current_level:
            self.current_level = new_level
            self.update_jedi_rank()

    def update_jedi_rank(self):
        """Mettre √† jour le rang Jedi selon le niveau"""
        if self.current_level >= 10:
            self.jedi_rank = JediRank.GRAND_MASTER
        elif self.current_level >= 8:
            self.jedi_rank = JediRank.MASTER
        elif self.current_level >= 6:
            self.jedi_rank = JediRank.KNIGHT
        elif self.current_level >= 3:
            self.jedi_rank = JediRank.PADAWAN
        elif self.current_level >= 2:
            self.jedi_rank = JediRank.INITIATE
        else:
            self.jedi_rank = JediRank.YOUNGLING

    def is_account_locked(self) -> bool:
        """V√©rifier si le compte est verrouill√©"""
        if self.locked_until is None:
            return False
        return datetime.now(timezone.utc) < self.locked_until

    def can_attempt_login(self) -> bool:
        """V√©rifier si l'utilisateur peut tenter de se connecter"""
        return not self.is_account_locked() and self.failed_login_attempts < 5

    def reset_failed_attempts(self):
        """R√©initialiser les tentatives de connexion √©chou√©es"""
        self.failed_login_attempts = 0
        self.locked_until = None

    def increment_failed_attempts(self):
        """Incr√©menter les tentatives √©chou√©es et verrouiller si n√©cessaire"""
        self.failed_login_attempts += 1
        if self.failed_login_attempts >= 5:
            # Verrouiller pour 30 minutes
            self.locked_until = datetime.now(timezone.utc) + timedelta(minutes=30)

    def get_accessibility_preference(self, key: str, default=None):
        """R√©cup√©rer une pr√©f√©rence d'accessibilit√©"""
        if not self.accessibility_settings:
            return default
        return self.accessibility_settings.get(key, default)

    def set_accessibility_preference(self, key: str, value):
        """D√©finir une pr√©f√©rence d'accessibilit√©"""
        if not self.accessibility_settings:
            self.accessibility_settings = {}
        self.accessibility_settings[key] = value

    def get_cognitive_profile_trait(self, trait: str, default=None):
        """R√©cup√©rer un trait du profil cognitif"""
        if not self.cognitive_profile:
            return default
        return self.cognitive_profile.get(trait, default)

    def has_special_need(self, need: str) -> bool:
        """V√©rifier si l'utilisateur a un besoin sp√©cial"""
        if not self.special_needs:
            return False
        return need in self.special_needs.get('conditions', [])
'''

    # √âcrire le mod√®le mis √† jour
    user_model_file = project_root / "app" / "models" / "user_extended.py"
    
    with open(user_model_file, 'w', encoding='utf-8') as f:
        f.write(updated_model)
    
    print(f"‚úÖ Mod√®le User √©tendu cr√©√© : {user_model_file}")
    print("üìù Ce fichier contient le mod√®le User avec toutes les extensions futures")
    print("   Vous pouvez l'utiliser pour remplacer le mod√®le actuel apr√®s migration")

def create_new_models():
    """Cr√©er les nouveaux mod√®les pour les tables futures"""
    
    # Mod√®le UserSession
    user_session_model = '''"""
Mod√®le SQLAlchemy pour les sessions utilisateur
"""
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, JSON, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from sqlalchemy.dialects.postgresql import INET
from app.db.base import Base


class UserSession(Base):
    """Mod√®le pour les sessions utilisateur"""
    __tablename__ = "user_sessions"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    session_token = Column(String(255), unique=True, nullable=False, index=True)
    device_info = Column(JSON, nullable=True)
    ip_address = Column(INET, nullable=True)
    user_agent = Column(Text, nullable=True)
    location_data = Column(JSON, nullable=True)
    is_active = Column(Boolean, default=True, index=True)
    last_activity = Column(DateTime(timezone=True), default=func.now())
    created_at = Column(DateTime(timezone=True), default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=False, index=True)

    # Relations
    user = relationship("User", back_populates="user_sessions")

    def __repr__(self):
        return f"<UserSession {self.id}: User {self.user_id}, Active: {self.is_active}>"

    def is_expired(self) -> bool:
        """V√©rifier si la session a expir√©"""
        from datetime import datetime, timezone
        return datetime.now(timezone.utc) > self.expires_at

    def extend_session(self, hours: int = 24):
        """Prolonger la session"""
        from datetime import datetime, timezone, timedelta
        self.expires_at = datetime.now(timezone.utc) + timedelta(hours=hours)
        self.last_activity = datetime.now(timezone.utc)
'''

    # Mod√®le Achievement
    achievement_model = '''"""
Mod√®les SQLAlchemy pour le syst√®me de badges
"""
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, JSON, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.db.base import Base


class Achievement(Base):
    """Mod√®le pour les badges/achievements"""
    __tablename__ = "achievements"

    id = Column(Integer, primary_key=True, index=True)
    code = Column(String(100), unique=True, nullable=False, index=True)
    name = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    icon_url = Column(String(255), nullable=True)
    category = Column(String(50), nullable=True, index=True)
    difficulty = Column(String(50), nullable=True)  # bronze, silver, gold, legendary
    points_reward = Column(Integer, default=0)
    is_secret = Column(Boolean, default=False)
    requirements = Column(JSON, nullable=True)
    star_wars_title = Column(String(255), nullable=True)
    is_active = Column(Boolean, default=True, index=True)
    created_at = Column(DateTime(timezone=True), default=func.now())

    # Relations
    user_achievements = relationship("UserAchievement", back_populates="achievement", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Achievement {self.code}: {self.name} ({self.difficulty})>"


class UserAchievement(Base):
    """Mod√®le pour les badges obtenus par les utilisateurs"""
    __tablename__ = "user_achievements"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    achievement_id = Column(Integer, ForeignKey("achievements.id", ondelete="CASCADE"), nullable=False)
    earned_at = Column(DateTime(timezone=True), default=func.now(), index=True)
    progress_data = Column(JSON, nullable=True)
    is_displayed = Column(Boolean, default=True)

    # Relations
    user = relationship("User", back_populates="user_achievements")
    achievement = relationship("Achievement", back_populates="user_achievements")

    def __repr__(self):
        return f"<UserAchievement: User {self.user_id}, Achievement {self.achievement_id}>"
'''

    # Mod√®le Notification
    notification_model = '''"""
Mod√®le SQLAlchemy pour les notifications
"""
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, JSON, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.db.base import Base


class Notification(Base):
    """Mod√®le pour les notifications utilisateur"""
    __tablename__ = "notifications"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    type = Column(String(50), nullable=False, index=True)
    title = Column(String(255), nullable=False)
    message = Column(Text, nullable=True)
    data = Column(JSON, nullable=True)
    action_url = Column(String(255), nullable=True)
    is_read = Column(Boolean, default=False, index=True)
    is_email_sent = Column(Boolean, default=False)
    priority = Column(Integer, default=5)  # 1-10
    expires_at = Column(DateTime(timezone=True), nullable=True)
    created_at = Column(DateTime(timezone=True), default=func.now(), index=True)

    # Relations
    user = relationship("User", back_populates="notifications")

    def __repr__(self):
        return f"<Notification {self.id}: {self.type} for User {self.user_id}>"

    def mark_as_read(self):
        """Marquer la notification comme lue"""
        self.is_read = True

    def is_expired(self) -> bool:
        """V√©rifier si la notification a expir√©"""
        if self.expires_at is None:
            return False
        from datetime import datetime, timezone
        return datetime.now(timezone.utc) > self.expires_at
'''

    # Cr√©er les fichiers
    models_dir = project_root / "app" / "models"
    
    files_to_create = [
        ("user_session.py", user_session_model),
        ("achievement.py", achievement_model),
        ("notification.py", notification_model)
    ]
    
    for filename, content in files_to_create:
        file_path = models_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Mod√®le cr√©√© : {file_path}")

def main():
    """Cr√©er tous les mod√®les √©tendus"""
    print("üöÄ Cr√©ation des mod√®les √©tendus pour Mathakine...")
    print()
    
    try:
        update_user_model()
        print()
        create_new_models()
        print()
        
        print("üéâ Tous les mod√®les √©tendus ont √©t√© cr√©√©s !")
        print()
        print("üìã Prochaines √©tapes :")
        print("   1. V√©rifier les mod√®les cr√©√©s")
        print("   2. Ex√©cuter les migrations Alembic")
        print("   3. Mettre √† jour les imports dans __init__.py")
        print("   4. Adapter les services pour utiliser les nouveaux champs")
        print("   5. Cr√©er les sch√©mas Pydantic correspondants")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des mod√®les : {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 