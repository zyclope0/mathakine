#!/usr/bin/env python
"""
Script pour appliquer les migrations Alembic de mani√®re s√©curis√©e en production.
Ce script:
1. Analyse les migrations √† appliquer pour d√©tecter des op√©rations risqu√©es
2. Effectue une sauvegarde de la base de donn√©es avant la migration
3. Applique les migrations avec journalisation d√©taill√©e
4. G√®re les erreurs et propose des actions de r√©cup√©ration

Ce script doit √™tre utilis√© en production pour toute migration de sch√©ma.
"""
import os
import sys
import re
import subprocess
import argparse
import time
from pathlib import Path

# Ajouter le r√©pertoire parent au sys.path
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from app.core.config import settings
from app.core.logging_config import get_logger
from alembic.config import Config
from alembic import command
from alembic.script import ScriptDirectory
from alembic.runtime.migration import MigrationContext
from sqlalchemy import create_engine, text

# Configuration du logging
logger = get_logger("safe_migrate")

# Chemin vers le script de sauvegarde
BACKUP_SCRIPT = os.path.join(BASE_DIR, "scripts", "alembic_backup.py")

# Liste des op√©rations consid√©r√©es comme risqu√©es
RISKY_OPERATIONS = [
    r'op\.drop_table\([\'"]([^\'"]+)[\'"]\)',              # Suppression de table
    r'op\.drop_column\([\'"]([^\'"]+)[\'"],\s*[\'"]([^\'"]+)[\'"]\)',  # Suppression de colonne
    r'op\.alter_column\([\'"]([^\'"]+)[\'"],\s*[\'"]([^\'"]+)[\'"]\s*.*not_nullable=True',  # Ajout de NOT NULL
    r'op\.rename_table\([\'"]([^\'"]+)[\'"],\s*[\'"]([^\'"]+)[\'"]\)',  # Renommage de table
    r'op\.execute\([\'"]DROP',                              # Ex√©cution directe de DROP
    r'op\.execute\([\'"]TRUNCATE',                          # Ex√©cution directe de TRUNCATE
    r'op\.execute\([\'"]ALTER\s+TABLE.*DROP\s+CONSTRAINT',  # Suppression de contrainte
]

# Tables prot√©g√©es que nous ne voulons jamais supprimer ou modifier sans confirmation
PROTECTED_TABLES = {'results', 'statistics', 'user_stats', 'schema_version', 'exercises', 'users', 'attempts'}

def get_current_revision():
    """R√©cup√®re la r√©vision actuelle de la base de donn√©es."""
    try:
        engine = create_engine(settings.DATABASE_URL)
        with engine.connect() as conn:
            context = MigrationContext.configure(conn)
            return context.get_current_revision()
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration de la r√©vision actuelle: {e}")
        return None

def get_pending_migrations():
    """R√©cup√®re la liste des migrations √† appliquer."""
    alembic_cfg = Config(os.path.join(BASE_DIR, "alembic.ini"))
    script = ScriptDirectory.from_config(alembic_cfg)
    
    current_rev = get_current_revision()
    if not current_rev:
        logger.error("Impossible de d√©terminer la r√©vision actuelle")
        return []
    
    # R√©cup√©rer les migrations √† appliquer
    revisions = []
    for rev in script.walk_revisions(base=current_rev, head="head"):
        if rev.revision != current_rev:
            revisions.append(rev)
    
    return list(reversed(revisions))

def check_migration_safety(revision):
    """Analyse une migration pour y d√©tecter des op√©rations risqu√©es."""
    # Trouver le fichier de migration
    migrations_dir = os.path.join(BASE_DIR, "migrations", "versions")
    migration_file = os.path.join(migrations_dir, f"{revision.revision}.py")
    
    if not os.path.exists(migration_file):
        # Tenter de trouver le fichier avec le nom de fichier diff√©rent du revision_id
        for file in os.listdir(migrations_dir):
            if file.endswith(".py"):
                with open(os.path.join(migrations_dir, file), 'r') as f:
                    content = f.read()
                    if f'revision: str = \'{revision.revision}\'' in content:
                        migration_file = os.path.join(migrations_dir, file)
                        break
    
    if not os.path.exists(migration_file):
        logger.error(f"Fichier de migration introuvable pour {revision.revision}")
        return False, []
    
    risky_operations = []
    with open(migration_file, 'r') as f:
        content = f.read()
        
        # Rechercher les op√©rations risqu√©es
        for pattern in RISKY_OPERATIONS:
            matches = re.findall(pattern, content)
            if matches:
                for match in matches:
                    if isinstance(match, tuple):  # Pour les patterns avec plusieurs groupes
                        table_name = match[0]
                        column_name = match[1] if len(match) > 1 else ""
                        operation = f"{pattern.split('op\\.')[1].split('\\(')[0]} sur {table_name}.{column_name}" if column_name else f"{pattern.split('op\\.')[1].split('\\(')[0]} sur {table_name}"
                    else:  # Pour les patterns avec un seul groupe
                        table_name = match
                        operation = f"{pattern.split('op\\.')[1].split('\\(')[0]} sur {table_name}"
                    
                    # V√©rifier si c'est une table prot√©g√©e
                    if table_name in PROTECTED_TABLES:
                        risky_operations.append(f"üö® CRITIQUE: {operation} (Table prot√©g√©e)")
                    else:
                        risky_operations.append(f"‚ö†Ô∏è RISQUE: {operation}")
    
    return len(risky_operations) == 0, risky_operations

def backup_database():
    """Ex√©cute le script de sauvegarde de la base de donn√©es."""
    logger.info("Lancement de la sauvegarde de la base de donn√©es...")
    
    try:
        subprocess.run(
            [sys.executable, BACKUP_SCRIPT],
            check=True
        )
        logger.success("Sauvegarde de la base de donn√©es termin√©e")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Erreur lors de la sauvegarde: {e}")
        return False
    except Exception as e:
        logger.error(f"Exception lors de la sauvegarde: {e}")
        return False

def apply_migrations(target="head", sql=False):
    """Applique les migrations jusqu'√† la r√©vision cible."""
    logger.info(f"Application des migrations jusqu'√† {target}...")
    
    alembic_cfg = Config(os.path.join(BASE_DIR, "alembic.ini"))
    
    try:
        if sql:
            # G√©n√©rer le SQL sans l'ex√©cuter
            with open("migration_sql.sql", "w") as f:
                command.upgrade(alembic_cfg, target, sql=True, stdout=f)
            logger.info(f"SQL de migration g√©n√©r√© dans migration_sql.sql")
            return True
        else:
            # Ex√©cuter la migration
            command.upgrade(alembic_cfg, target)
            logger.success(f"Migrations appliqu√©es avec succ√®s jusqu'√† {target}")
            return True
    except Exception as e:
        logger.error(f"Erreur lors de l'application des migrations: {e}")
        return False

def safe_migrate(target="head", force=False, dry_run=False, sql=False):
    """
    Applique les migrations de mani√®re s√©curis√©e.
    
    Args:
        target: La r√©vision cible (d√©faut: "head")
        force: Forcer l'application m√™me si des op√©rations risqu√©es sont d√©tect√©es
        dry_run: Ne pas appliquer les migrations, juste afficher ce qui serait fait
        sql: G√©n√©rer le SQL sans l'ex√©cuter
    """
    logger.info(f"D√©marrage de la migration s√©curis√©e vers {target}...")
    
    # 1. R√©cup√©rer les migrations √† appliquer
    pending_migrations = get_pending_migrations()
    if not pending_migrations:
        logger.info("Aucune migration √† appliquer.")
        return True
    
    logger.info(f"{len(pending_migrations)} migration(s) √† appliquer:")
    for i, rev in enumerate(pending_migrations, 1):
        logger.info(f"{i}. {rev.revision}: {rev.doc}")
    
    # 2. Analyser chaque migration pour les op√©rations risqu√©es
    all_safe = True
    risky_operations = []
    
    for rev in pending_migrations:
        logger.info(f"Analyse de la migration {rev.revision}...")
        is_safe, operations = check_migration_safety(rev)
        
        if not is_safe:
            all_safe = False
            risky_operations.extend(operations)
    
    if not all_safe:
        logger.warning("Des op√©rations risqu√©es ont √©t√© d√©tect√©es dans les migrations:")
        for op in risky_operations:
            logger.warning(f"  - {op}")
        
        if not force and not dry_run:
            logger.error("Migration annul√©e. Utilisez --force pour appliquer malgr√© les risques.")
            return False
    
    # 3. Si c'est un dry run, s'arr√™ter ici
    if dry_run:
        logger.info("Dry run termin√©. Aucune modification n'a √©t√© appliqu√©e.")
        return True
    
    # 4. Faire une sauvegarde avant d'appliquer les migrations
    if not backup_database():
        logger.error("Migration annul√©e √† cause de l'√©chec de la sauvegarde.")
        logger.info("Utilisez --force pour ignorer l'√©chec de la sauvegarde.")
        if not force:
            return False
    
    # 5. Appliquer les migrations
    start_time = time.time()
    success = apply_migrations(target, sql)
    end_time = time.time()
    
    if success:
        logger.success(f"Migration termin√©e en {end_time - start_time:.2f} secondes")
    else:
        logger.error("La migration a √©chou√©.")
        logger.info("Consultez les logs pour plus de d√©tails et envisagez de restaurer la sauvegarde.")
    
    return success

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Appliquer les migrations Alembic de mani√®re s√©curis√©e")
    parser.add_argument("--target", default="head", help="R√©vision cible (d√©faut: head)")
    parser.add_argument("--force", action="store_true", help="Forcer l'application m√™me si des risques sont d√©tect√©s")
    parser.add_argument("--dry-run", action="store_true", help="Ne pas appliquer les migrations, juste afficher ce qui serait fait")
    parser.add_argument("--sql", action="store_true", help="G√©n√©rer le SQL sans l'ex√©cuter")
    args = parser.parse_args()
    
    success = safe_migrate(args.target, args.force, args.dry_run, args.sql)
    if success:
        sys.exit(0)
    else:
        sys.exit(1) 