#!/usr/bin/env python3
"""
üîç Script de v√©rification pre-commit pour Mathakine
Ex√©cute les tests critiques avant chaque commit pour √©viter les r√©gressions.
"""

import sys
import subprocess
import json
import time
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from enum import Enum

class TestLevel(Enum):
    """Niveaux de criticit√© des tests"""
    CRITICAL = "üî¥ CRITIQUE"      # Bloque le commit
    IMPORTANT = "üü° IMPORTANT"    # Avertissement
    SUPPLEMENTARY = "üü¢ INFORMATIF"  # Information seulement

@dataclass
class TestSuite:
    """Configuration d'une suite de tests"""
    name: str
    level: TestLevel
    paths: List[str]
    blocking: bool
    timeout: int = 300  # 5 minutes par d√©faut

class PreCommitChecker:
    """Gestionnaire des v√©rifications pre-commit"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.results = {}
        self.start_time = time.time()
        
        # Configuration des suites de tests
        self.test_suites = [
            TestSuite(
                name="Tests Critiques",
                level=TestLevel.CRITICAL,
                paths=[
                    "tests/functional/",
                    "tests/unit/test_user_service.py",
                    "tests/unit/test_exercise_service.py", 
                    "tests/unit/test_logic_challenge_service.py",
                    "tests/unit/test_auth_service.py"
                ],
                blocking=True,
                timeout=300  # Augment√© de 180s √† 300s (5 min)
            ),
            TestSuite(
                name="Tests Importants",
                level=TestLevel.IMPORTANT,
                paths=[
                    "tests/integration/",
                    "tests/unit/test_models.py",
                    "tests/unit/test_enhanced_server_adapter.py"
                ],
                blocking=False,
                timeout=180  # Augment√© de 120s √† 180s (3 min)
            ),
            TestSuite(
                name="Tests Compl√©mentaires",
                level=TestLevel.SUPPLEMENTARY,
                paths=[
                    "tests/unit/test_cli.py",
                    "tests/unit/test_db_init_service.py"
                ],
                blocking=False,
                timeout=120  # Augment√© de 60s √† 120s (2 min)
            )
        ]

    def print_header(self):
        """Affiche l'en-t√™te du script"""
        print("=" * 60)
        print("üîç V√âRIFICATION PRE-COMMIT MATHAKINE")
        print("=" * 60)
        print()

    def print_section(self, title: str, level: TestLevel):
        """Affiche une section de tests"""
        print(f"\n{level.value} {title}")
        print("-" * 50)

    def run_command(self, cmd: List[str], timeout: int = 300) -> Tuple[bool, str, str]:
        """Ex√©cute une commande avec timeout"""
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=self.project_root
            )
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", f"Timeout apr√®s {timeout}s"
        except Exception as e:
            return False, "", str(e)

    def run_test_suite(self, suite: TestSuite) -> bool:
        """Ex√©cute une suite de tests"""
        self.print_section(suite.name, suite.level)
        
        # V√©rifier que les chemins existent
        existing_paths = []
        for path in suite.paths:
            full_path = self.project_root / path
            if full_path.exists():
                existing_paths.append(path)
            else:
                print(f"‚ö†Ô∏è  Chemin ignor√© (inexistant): {path}")
        
        if not existing_paths:
            print(f"‚ùå Aucun test trouv√© pour {suite.name}")
            return not suite.blocking
        
        # Construire la commande pytest
        cmd = [
            sys.executable, "-m", "pytest",
            *existing_paths,
            "--tb=short",
            "-v",
            "--maxfail=3" if suite.blocking else "--maxfail=10"
        ]
        
        print(f"üöÄ Ex√©cution: {' '.join(cmd)}")
        print()
        
        success, stdout, stderr = self.run_command(cmd, suite.timeout)
        
        # Analyser les r√©sultats
        if success:
            print(f"‚úÖ {suite.name} - SUCC√àS")
            # Extraire le nombre de tests pass√©s
            lines = stdout.split('\n')
            for line in lines:
                if 'passed' in line and ('failed' in line or 'error' in line):
                    print(f"üìä {line.strip()}")
                    break
        else:
            print(f"‚ùå {suite.name} - √âCHEC")
            if stderr:
                print(f"üîç Erreur: {stderr[:500]}...")
            
            # Afficher les √©checs importants
            if "FAILED" in stdout:
                print("\nüîç Tests √©chou√©s:")
                lines = stdout.split('\n')
                for line in lines:
                    if "FAILED" in line:
                        print(f"  ‚ùå {line.strip()}")
        
        self.results[suite.name] = {
            'success': success,
            'level': suite.level,
            'blocking': suite.blocking,
            'stdout': stdout,
            'stderr': stderr
        }
        
        return success

    def check_code_quality(self) -> bool:
        """V√©rifications de qualit√© du code"""
        self.print_section("Qualit√© du Code", TestLevel.IMPORTANT)
        
        checks = [
            {
                'name': 'Formatage (Black)',
                'cmd': [sys.executable, '-m', 'black', '--check', '--diff', '.'],
                'blocking': False
            },
            {
                'name': 'Imports (isort)', 
                'cmd': [sys.executable, '-m', 'isort', '--check-only', '--diff', '.'],
                'blocking': False
            },
            {
                'name': 'Linting (Flake8)',
                'cmd': [sys.executable, '-m', 'flake8', '.', '--count', '--statistics'],
                'blocking': False
            }
        ]
        
        all_passed = True
        
        for check in checks:
            print(f"üîç {check['name']}...")
            success, stdout, stderr = self.run_command(check['cmd'], 30)
            
            if success:
                print(f"  ‚úÖ {check['name']} - OK")
            else:
                print(f"  ‚ö†Ô∏è  {check['name']} - Probl√®mes d√©tect√©s")
                if not check['blocking']:
                    print(f"     (Non-bloquant)")
                else:
                    all_passed = False
        
        return all_passed

    def generate_summary(self) -> bool:
        """G√©n√®re un r√©sum√© des r√©sultats"""
        print("\n" + "=" * 60)
        print("üìã R√âSUM√â DES V√âRIFICATIONS")
        print("=" * 60)
        
        critical_failed = False
        important_failed = False
        
        for suite_name, result in self.results.items():
            level = result['level']
            success = result['success']
            blocking = result['blocking']
            
            status = "‚úÖ PASS√â" if success else "‚ùå √âCHEC"
            blocking_text = " (BLOQUANT)" if blocking else " (non-bloquant)"
            
            print(f"{level.value} {suite_name}: {status}{blocking_text}")
            
            if not success and blocking:
                critical_failed = True
            elif not success and level == TestLevel.IMPORTANT:
                important_failed = True
        
        # Temps d'ex√©cution
        duration = time.time() - self.start_time
        print(f"\n‚è±Ô∏è  Dur√©e totale: {duration:.1f}s")
        
        # D√©cision finale
        print("\n" + "=" * 60)
        if critical_failed:
            print("üö® COMMIT BLOQU√â")
            print("‚ùå Des tests critiques ont √©chou√©")
            print("üîß Corrigez les erreurs avant de commiter")
            return False
        elif important_failed:
            print("‚ö†Ô∏è  COMMIT AUTORIS√â AVEC AVERTISSEMENTS")
            print("üü° Des tests importants ont √©chou√©")
            print("üìù Consid√©rez corriger ces probl√®mes")
            return True
        else:
            print("üéâ COMMIT AUTORIS√â")
            print("‚úÖ Toutes les v√©rifications critiques passent")
            return True

    def run(self) -> bool:
        """Ex√©cute toutes les v√©rifications"""
        self.print_header()
        
        # V√©rifier que nous sommes dans le bon r√©pertoire
        if not (self.project_root / "mathakine_cli.py").exists():
            print("‚ùå Erreur: Script doit √™tre ex√©cut√© depuis la racine du projet Mathakine")
            return False
        
        # Ex√©cuter les suites de tests
        for suite in self.test_suites:
            self.run_test_suite(suite)
        
        # V√©rifications de qualit√© du code
        self.check_code_quality()
        
        # G√©n√©rer le r√©sum√©
        return self.generate_summary()

def main():
    """Point d'entr√©e principal"""
    checker = PreCommitChecker()
    success = checker.run()
    
    if not success:
        print("\nüí° CONSEILS:")
        print("  ‚Ä¢ Ex√©cutez les tests individuellement: python -m pytest tests/functional/ -v")
        print("  ‚Ä¢ V√©rifiez les logs d√©taill√©s ci-dessus")
        print("  ‚Ä¢ Utilisez --tb=long pour plus de d√©tails")
        print("  ‚Ä¢ Consultez la documentation des tests")
        
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 