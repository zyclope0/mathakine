#!/usr/bin/env python3
"""
Script de nettoyage complet du projet Mathakine
Analyse et archive tous les fichiers obsol√®tes
"""
import os
import shutil
from datetime import datetime
from pathlib import Path

# D√©finir les fichiers √† archiver par cat√©gorie
ADDITIONAL_FILES_TO_ARCHIVE = {
    "obsolete_tests": [
        "tests/conftest_new.py",  # Ancien conftest
        "tests/simple_test.py",   # Test simple temporaire
        "tests/indentation_fixer.py",  # Script de fix
        "tests/maintain_tests.py",  # Ancien script de maintenance
        "tests/DOCUMENTATION_TESTS_CONSOLIDEE.md",  # Documentation obsol√®te
        "tests/NETTOYAGE_DOCUMENTATION.md"  # Documentation temporaire
    ],
    "obsolete_scripts": [
        "scripts/fix_all_issues.py",
        "scripts/fix_enum_names_project_wide.py",
        "scripts/fix_enum_reference_chain.py",
        "scripts/fix_enum_values.py",
        "scripts/clean_test_db.py",  # D√©j√† archiv√© ailleurs
        "scripts/move_obsolete_files.py",
        "scripts/detect_obsolete_files.py",
        "scripts/add_test_data_v2.py"  # Ancien script de donn√©es test
    ],
    "old_documentation": [
        "ARCHITECTURE_AM√âLIOR√âE.md",  # Ancienne version de l'architecture
        "init_db.py"  # Ancien script d'init (remplac√© par alembic)
    ],
    "build_scripts": [
        "scripts/build.sh",
        "scripts/setup_persistent_db.sh",
        "scripts/start_render.sh"
    ]
}

def analyze_project_structure():
    """Analyser la structure du projet et identifier les fichiers obsol√®tes"""
    print("üîç Analyse du projet Mathakine...")
    
    # Fichiers essentiels √† conserver
    ESSENTIAL_FILES = {
        "root": [
            ".env", ".env.example", "sample.env",
            ".gitignore", ".dockerignore", ".flake8",
            "alembic.ini", "setup.cfg",
            "Dockerfile", "Procfile",
            "LICENSE", "README.md", "STRUCTURE.md",
            "requirements.txt",
            "mathakine_cli.py", "enhanced_server.py",
            "ai_context_summary.md"
        ],
        "app": "Tous les fichiers (code principal)",
        "migrations": "Tous les fichiers (migrations Alembic)",
        "templates": "Tous les fichiers (templates HTML)",
        "static": "Tous les fichiers (CSS/JS)",
        "docs": "Tous les fichiers (documentation)",
        "server": "Tous les fichiers (serveur)",
        "logs": "Conserver mais vider p√©riodiquement",
        "backups": "Conserver pour sauvegardes"
    }
    
    # Scripts essentiels √† conserver
    ESSENTIAL_SCRIPTS = [
        "scripts/check_compatibility.py",
        "scripts/generate_context.py",
        "scripts/generate_migration.py",
        "scripts/init_alembic.py",
        "scripts/normalize_css.py",
        "scripts/pre_commit_migration_check.py",
        "scripts/toggle_database.py",
        "scripts/restore_deleted_tables.sql",
        "scripts/README.md"
    ]
    
    # Tests essentiels √† conserver
    ESSENTIAL_TESTS = [
        "tests/conftest.py",
        "tests/CORRECTION_PLAN.md",
        "tests/DOCUMENTATION_TESTS.md",
        "tests/README.md",
        "tests/test_enum_adaptation.py",
        "tests/unified_test_runner.bat",
        "tests/unified_test_runner.py"
    ]
    
    print("\n‚úÖ Fichiers essentiels identifi√©s")
    print("‚ùå Fichiers obsol√®tes identifi√©s pour archivage")
    
    return ESSENTIAL_FILES, ESSENTIAL_SCRIPTS, ESSENTIAL_TESTS

def archive_additional_files():
    """Archiver les fichiers suppl√©mentaires identifi√©s"""
    base_archive = Path("archives")
    archived_count = 0
    
    print("\nüóÑÔ∏è Archivage des fichiers obsol√®tes suppl√©mentaires...")
    
    for category, files in ADDITIONAL_FILES_TO_ARCHIVE.items():
        print(f"\nüìÅ Cat√©gorie: {category}")
        
        # Cr√©er le dossier si n√©cessaire
        category_path = base_archive / category
        category_path.mkdir(exist_ok=True)
        
        for file in files:
            if os.path.exists(file):
                try:
                    # Extraire le nom du fichier
                    filename = Path(file).name
                    dest = category_path / filename
                    
                    # Si le fichier existe d√©j√†, ajouter un timestamp
                    if dest.exists():
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        stem = dest.stem
                        suffix = dest.suffix
                        dest = category_path / f"{stem}_{timestamp}{suffix}"
                    
                    shutil.move(file, dest)
                    print(f"  ‚úÖ {file} ‚Üí archives/{category}/")
                    archived_count += 1
                except Exception as e:
                    print(f"  ‚ùå Erreur avec {file}: {e}")
            else:
                print(f"  ‚è≠Ô∏è {file} n'existe pas (d√©j√† archiv√©?)")
    
    return archived_count

def clean_cache_directories():
    """Nettoyer les dossiers de cache"""
    cache_dirs = [
        "__pycache__",
        ".pytest_cache",
        "test_results"
    ]
    
    cleaned_count = 0
    print("\nüßπ Nettoyage des dossiers de cache...")
    
    for root, dirs, files in os.walk("."):
        for dir_name in dirs:
            if dir_name in cache_dirs:
                dir_path = Path(root) / dir_name
                try:
                    shutil.rmtree(dir_path)
                    print(f"  ‚úÖ Supprim√©: {dir_path}")
                    cleaned_count += 1
                except Exception as e:
                    print(f"  ‚ùå Erreur avec {dir_path}: {e}")
    
    return cleaned_count

def generate_cleanup_report():
    """G√©n√©rer un rapport de nettoyage"""
    report_content = f"""# Rapport de nettoyage du projet Mathakine
Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}

## Structure du projet apr√®s nettoyage

### Dossiers principaux conserv√©s:
- **app/** : Code principal de l'application
- **migrations/** : Migrations Alembic de la base de donn√©es
- **templates/** : Templates HTML
- **static/** : Fichiers CSS, JS et images
- **docs/** : Documentation compl√®te
- **server/** : Code du serveur
- **tests/** : Tests unitaires, API, int√©gration et fonctionnels
- **scripts/** : Scripts utilitaires essentiels
- **archives/** : Fichiers obsol√®tes archiv√©s

### Fichiers racine essentiels:
- Configuration: .env, .gitignore, alembic.ini, setup.cfg
- D√©ploiement: Dockerfile, Procfile, requirements.txt
- Documentation: README.md, STRUCTURE.md, ai_context_summary.md
- Points d'entr√©e: mathakine_cli.py, enhanced_server.py

### Scripts essentiels conserv√©s:
- check_compatibility.py : V√©rification de compatibilit√©
- generate_context.py : G√©n√©ration de contexte
- generate_migration.py : G√©n√©ration de migrations
- toggle_database.py : Basculement SQLite/PostgreSQL
- normalize_css.py : Normalisation CSS

### Tests essentiels conserv√©s:
- unified_test_runner.py : Runner de tests unifi√©
- conftest.py : Configuration pytest
- CORRECTION_PLAN.md : Plan de correction des tests
- DOCUMENTATION_TESTS.md : Documentation des tests

## Fichiers archiv√©s
Voir le dossier archives/ pour tous les fichiers obsol√®tes conserv√©s pour r√©f√©rence historique.

## Recommandations
1. Ex√©cuter r√©guli√®rement ce script de nettoyage
2. Vider p√©riodiquement le dossier logs/
3. Nettoyer les caches apr√®s chaque session de d√©veloppement
4. R√©viser p√©riodiquement le dossier archives/
"""
    
    with open("CLEANUP_REPORT.md", "w", encoding="utf-8") as f:
        f.write(report_content)
    
    print("\nüìù Rapport de nettoyage cr√©√©: CLEANUP_REPORT.md")

def main():
    """Fonction principale de nettoyage"""
    print("üöÄ Nettoyage complet du projet Mathakine")
    print("=" * 50)
    
    # Analyser la structure
    analyze_project_structure()
    
    # Archiver les fichiers obsol√®tes
    archived = archive_additional_files()
    
    # Nettoyer les caches
    cleaned = clean_cache_directories()
    
    # G√©n√©rer le rapport
    generate_cleanup_report()
    
    print("\n" + "=" * 50)
    print(f"‚úÖ Nettoyage termin√©!")
    print(f"üìä R√©sultats:")
    print(f"  - {archived} fichiers archiv√©s")
    print(f"  - {cleaned} dossiers de cache nettoy√©s")
    print(f"  - 1 rapport de nettoyage g√©n√©r√©")
    
    # Archiver ce script lui-m√™me apr√®s ex√©cution
    print("\nüóëÔ∏è Archivage du script de nettoyage lui-m√™me...")
    if os.path.exists("archive_obsolete_files.py"):
        try:
            shutil.move("archive_obsolete_files.py", "archives/obsolete_scripts/")
            print("  ‚úÖ archive_obsolete_files.py archiv√©")
        except:
            pass
    
    try:
        shutil.move("complete_project_cleanup.py", "archives/obsolete_scripts/")
        print("  ‚úÖ complete_project_cleanup.py archiv√©")
    except:
        pass

if __name__ == "__main__":
    main() 