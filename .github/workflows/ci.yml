name: 🚀 Mathakine CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mathakine_test

jobs:
  # ==========================================
  # 🔍 TESTS CRITIQUES (BLOQUANTS)
  # ==========================================
  critical-tests:
    name: 🔴 Tests Critiques (Bloquants)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mathakine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-json-report

    - name: 🗃️ Setup database
      run: |
        python mathakine_cli.py init --force
        
    - name: Sauvegarder l'utilisateur ObiWan
      run: |
        echo "🔐 Sauvegarde de l'utilisateur permanent ObiWan..."
        python scripts/keep_obiwan_user.py save --file .obiwan_user_hash
        echo "✅ Hash ObiWan sauvegardé"
      
    - name: Exécuter les tests
      run: |
        echo "🧪 Exécution des tests..."
        python -m pytest tests/ -v --tb=short
        echo "✅ Tests terminés"
      
    - name: Restaurer l'utilisateur ObiWan
      if: always()  # Toujours exécuter même si les tests échouent
      run: |
        echo "🔄 Restauration de l'utilisateur permanent ObiWan..."
        python scripts/keep_obiwan_user.py restore --file .obiwan_user_hash
        echo "✅ Utilisateur ObiWan restauré"
        
    - name: Vérifier l'utilisateur ObiWan
      if: always()
      run: |
        echo "🔍 Vérification de l'utilisateur ObiWan..."
        python scripts/keep_obiwan_user.py ensure
        echo "✅ Utilisateur ObiWan vérifié"

    - name: 🔴 Run Critical Tests
      id: critical_tests
      run: |
        python -m pytest \
          tests/functional/ \
          tests/unit/test_user_service.py \
          tests/unit/test_exercise_service.py \
          tests/unit/test_logic_challenge_service.py \
          tests/unit/test_auth_service.py \
          tests/api/test_auth.py \
          tests/api/test_exercises.py \
          --maxfail=1 \
          --tb=short \
          --json-report \
          --json-report-file=critical_tests_report.json \
          -v
          
    - name: 📊 Upload Critical Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: critical-tests-report
        path: critical_tests_report.json

    - name: ❌ Fail if Critical Tests Failed
      if: failure()
      run: |
        echo "🚨 ÉCHEC CRITIQUE : Les tests critiques ont échoué !"
        echo "❌ Le déploiement est BLOQUÉ jusqu'à résolution"
        exit 1

  # ==========================================
  # 🟡 TESTS IMPORTANTS (NON-BLOQUANTS)
  # ==========================================
  important-tests:
    name: 🟡 Tests Importants (Non-bloquants)
    runs-on: ubuntu-latest
    needs: critical-tests
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mathakine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🗃️ Setup database
      run: |
        python mathakine_cli.py init --force

    - name: 🟡 Run Important Tests
      run: |
        python -m pytest \
          tests/integration/ \
          tests/unit/test_models.py \
          tests/unit/test_db_adapter.py \
          tests/unit/test_enhanced_server_adapter.py \
          tests/api/test_users.py \
          tests/api/test_challenges.py \
          --tb=short \
          --json-report \
          --json-report-file=important_tests_report.json \
          -v || echo "⚠️ Certains tests importants ont échoué (non-bloquant)"

    - name: 📊 Upload Important Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: important-tests-report
        path: important_tests_report.json

  # ==========================================
  # 🟢 TESTS COMPLÉMENTAIRES (INFORMATIFS)
  # ==========================================
  supplementary-tests:
    name: 🟢 Tests Complémentaires (Informatifs)
    runs-on: ubuntu-latest
    needs: critical-tests
    continue-on-error: true

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🟢 Run Supplementary Tests
      run: |
        python -m pytest \
          tests/unit/test_cli.py \
          tests/unit/test_db_init_service.py \
          tests/unit/test_recommendation_service.py \
          --tb=short \
          --json-report \
          --json-report-file=supplementary_tests_report.json \
          -v || echo "ℹ️ Certains tests complémentaires ont échoué (informatif)"

    - name: 📊 Upload Supplementary Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: supplementary-tests-report
        path: supplementary_tests_report.json

  # ==========================================
  # 📊 ANALYSE DE COUVERTURE
  # ==========================================
  coverage-analysis:
    name: 📊 Analyse de Couverture
    runs-on: ubuntu-latest
    needs: critical-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mathakine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage[toml]

    - name: 🗃️ Setup database
      run: |
        python mathakine_cli.py init --force

    - name: 📊 Run Coverage Analysis
      run: |
        coverage run -m pytest tests/unit/ tests/functional/ --tb=short
        coverage report --format=markdown > coverage_report.md
        coverage html -d coverage_html

    - name: 📈 Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage_report.md
          coverage_html/

  # ==========================================
  # 🔍 QUALITÉ DU CODE
  # ==========================================
  code-quality:
    name: 🔍 Qualité du Code
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: 🎨 Check Code Formatting (Black)
      run: black --check --diff .

    - name: 📋 Check Import Sorting (isort)
      run: isort --check-only --diff .

    - name: 🔍 Lint Code (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🔒 Security Check (Bandit)
      run: bandit -r app/ -f json -o bandit_report.json || true

    - name: 🛡️ Dependency Security (Safety)
      run: safety check --json --output safety_report.json || true

    - name: 📊 Upload Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          bandit_report.json
          safety_report.json

  # ==========================================
  # 📋 RAPPORT FINAL
  # ==========================================
  final-report:
    name: 📋 Rapport Final
    runs-on: ubuntu-latest
    needs: [critical-tests, important-tests, supplementary-tests, coverage-analysis, code-quality]
    if: always()

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📊 Download All Reports
      uses: actions/download-artifact@v3

    - name: 📋 Generate Final Report
      run: |
        echo "# 🚀 Rapport CI/CD Mathakine" > final_report.md
        echo "" >> final_report.md
        echo "## 📊 Résumé des Tests" >> final_report.md
        echo "" >> final_report.md
        
        if [ -f critical-tests-report/critical_tests_report.json ]; then
          echo "### 🔴 Tests Critiques" >> final_report.md
          echo "✅ **PASSÉS** - Déploiement autorisé" >> final_report.md
        else
          echo "### 🔴 Tests Critiques" >> final_report.md
          echo "❌ **ÉCHEC** - Déploiement bloqué" >> final_report.md
        fi
        
        echo "" >> final_report.md
        echo "### 🟡 Tests Importants" >> final_report.md
        echo "ℹ️ Voir rapport détaillé" >> final_report.md
        echo "" >> final_report.md
        echo "### 🟢 Tests Complémentaires" >> final_report.md
        echo "ℹ️ Voir rapport détaillé" >> final_report.md
        echo "" >> final_report.md
        
        echo "## 📈 Couverture de Code" >> final_report.md
        if [ -f coverage-report/coverage_report.md ]; then
          cat coverage-report/coverage_report.md >> final_report.md
        fi

    - name: 📤 Upload Final Report
      uses: actions/upload-artifact@v3
      with:
        name: final-ci-report
        path: final_report.md

    - name: 💬 Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('final_report.md')) {
            const report = fs.readFileSync('final_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          } 