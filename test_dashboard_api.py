#!/usr/bin/env python3
"""
Script pour tester l'API du tableau de bord et diagnostiquer les probl√®mes d'affichage.
"""

import requests
import json
import sys
import os

# Ajouter le r√©pertoire du projet au path
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from app.db.base import SessionLocal
from app.models.user import User
from loguru import logger

def test_dashboard_api():
    """Teste l'API du tableau de bord."""
    logger.info("üß™ Test de l'API du tableau de bord...")
    
    # URL de base de l'application
    base_url = "http://localhost:8000"
    
    # Cr√©er une session pour maintenir les cookies
    session = requests.Session()
    
    try:
        # 1. Tester l'API sans authentification
        logger.info("üì° Test 1: API sans authentification")
        response = session.get(f"{base_url}/api/users/stats")
        logger.info(f"Status: {response.status_code}")
        logger.info(f"Response: {response.text[:200]}...")
        
        # 2. V√©rifier si l'utilisateur ObiWan existe dans la base
        logger.info("üîç Test 2: V√©rification de l'utilisateur ObiWan")
        db = SessionLocal()
        try:
            obiwan = db.query(User).filter(User.username == "ObiWan").first()
            if obiwan:
                logger.success(f"‚úÖ ObiWan trouv√© - ID: {obiwan.id}")
                
                # 3. Tester l'API avec l'ID d'ObiWan directement
                logger.info("üì° Test 3: API avec ID d'ObiWan")
                
                # Simuler une authentification en modifiant temporairement l'API
                # (pour le diagnostic uniquement)
                
            else:
                logger.error("‚ùå ObiWan non trouv√© dans la base de donn√©es")
                return False
        finally:
            db.close()
        
        # 4. Tester la page du tableau de bord
        logger.info("üåê Test 4: Page du tableau de bord")
        response = session.get(f"{base_url}/dashboard")
        logger.info(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            # V√©rifier si la page contient les √©l√©ments attendus
            content = response.text
            
            # Chercher les √©l√©ments JavaScript qui chargent les donn√©es
            if "loadDashboardData" in content:
                logger.success("‚úÖ JavaScript de chargement des donn√©es trouv√©")
            else:
                logger.warning("‚ö†Ô∏è JavaScript de chargement des donn√©es manquant")
            
            # Chercher l'appel √† l'API
            if "/api/users/stats" in content:
                logger.success("‚úÖ Appel API trouv√© dans le JavaScript")
            else:
                logger.warning("‚ö†Ô∏è Appel API manquant dans le JavaScript")
            
            # Chercher les √©l√©ments DOM des statistiques
            if "stats-value" in content:
                logger.success("‚úÖ √âl√©ments DOM des statistiques trouv√©s")
            else:
                logger.warning("‚ö†Ô∏è √âl√©ments DOM des statistiques manquants")
        
        # 5. Tester l'authentification (simulation)
        logger.info("üîê Test 5: Simulation d'authentification")
        
        # Essayer de se connecter avec ObiWan (si on conna√Æt son mot de passe)
        # Pour l'instant, on va juste v√©rifier la route de login
        response = session.get(f"{base_url}/login")
        logger.info(f"Page de login - Status: {response.status_code}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        return False

def test_direct_stats_service():
    """Teste directement le service de statistiques."""
    logger.info("üîß Test direct du service de statistiques...")
    
    try:
        from app.services.user_service import UserService
        
        db = SessionLocal()
        try:
            # R√©cup√©rer ObiWan
            obiwan = db.query(User).filter(User.username == "ObiWan").first()
            if not obiwan:
                logger.error("‚ùå ObiWan non trouv√©")
                return False
            
            # Tester le service directement
            logger.info(f"üìä Test du service pour ObiWan (ID: {obiwan.id})")
            stats = UserService.get_user_stats(db, obiwan.id)
            
            logger.info(f"üìà Statistiques r√©cup√©r√©es:")
            logger.info(f"   - Total tentatives: {stats.get('total_attempts', 0)}")
            logger.info(f"   - Tentatives correctes: {stats.get('correct_attempts', 0)}")
            logger.info(f"   - Taux de r√©ussite: {stats.get('success_rate', 0)}%")
            
            # Afficher les statistiques par type
            by_type = stats.get('by_exercise_type', {})
            if by_type:
                logger.info("   - Par type d'exercice:")
                for ex_type, type_stats in by_type.items():
                    logger.info(f"     * {ex_type}: {type_stats.get('total', 0)} tentatives, {type_stats.get('success_rate', 0)}% r√©ussite")
            
            # V√©rifier les donn√©es de progression
            progress = stats.get('progress', {})
            if progress:
                logger.info("   - Progression d√©taill√©e:")
                for ex_type, difficulties in progress.items():
                    for difficulty, prog_data in difficulties.items():
                        logger.info(f"     * {ex_type}/{difficulty}: Niveau {prog_data.get('mastery_level', 0)}")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test du service: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale."""
    logger.info("üöÄ D√©marrage des tests du tableau de bord...")
    
    print("="*60)
    print("üß™ DIAGNOSTIC DU TABLEAU DE BORD MATHAKINE")
    print("="*60)
    
    # Test 1: Service direct
    logger.info("\nüìã √âTAPE 1: Test du service de statistiques")
    service_ok = test_direct_stats_service()
    
    # Test 2: API HTTP
    logger.info("\nüìã √âTAPE 2: Test de l'API HTTP")
    api_ok = test_dashboard_api()
    
    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("="*60)
    
    if service_ok:
        print("‚úÖ Service de statistiques: FONCTIONNEL")
    else:
        print("‚ùå Service de statistiques: D√âFAILLANT")
    
    if api_ok:
        print("‚úÖ API HTTP: ACCESSIBLE")
    else:
        print("‚ùå API HTTP: PROBL√àME")
    
    # Recommandations
    print("\nüîß RECOMMANDATIONS:")
    
    if not service_ok:
        print("   1. V√©rifier la base de donn√©es et les mod√®les")
        print("   2. Contr√¥ler les services UserService et ExerciseService")
    
    if not api_ok:
        print("   3. V√©rifier les routes API et l'authentification")
        print("   4. Contr√¥ler le JavaScript du tableau de bord")
    
    if service_ok and not api_ok:
        print("   5. Le probl√®me semble √™tre dans l'authentification ou les routes")
    
    if not service_ok and not api_ok:
        print("   6. Probl√®me plus profond - v√©rifier la configuration compl√®te")
    
    print("\nüéØ PROCHAINE √âTAPE SUGG√âR√âE:")
    if service_ok and api_ok:
        print("   ‚Üí V√©rifier l'authentification utilisateur dans le navigateur")
    elif service_ok:
        print("   ‚Üí Corriger l'authentification et les routes API")
    else:
        print("   ‚Üí R√©parer le service de statistiques en priorit√©")
    
    logger.success("üéâ Diagnostic termin√©!")

if __name__ == "__main__":
    main() 